#!/usr/bin/env zsh
# -*- coding: utf-8 -*-
    # shellcheck shell=bash
    # shellcheck source=/dev/null
    # shellcheck disable=2015,2086

# set -a

# declare -ix SET_DEBUG && SET_DEBUG=${SET_DEBUG:-0}   # set to 1 for verbose testing

#?######################## PARAMETER HANDLING
    # parse_options() {
    #     # parse basic options [help|test|usage|version] & SET_DEBUG
    #     # TODO the 'exits' and lack of shifts make this function inadequate
    #     # TODO use standard functions in a wrapper instead
    #     case "$1" in
    #     -h | --help | help)
    #         set_man_page
    #         echo "$MAN_PAGE"
    #         return
    #         # exit 0
    #         ;;
    #     -t | --test | test)
    #         [[ ! "$SET_DEBUG" == '1' ]] && _run_tests "$@"
    #         return
    #         # exit 0
    #         ;;
    #     -u | --usage | usage)
    #         me "$USAGE"
    #         return
    #         # exit 0
    #         ;;
    #     -v | --version | version)
    #         ce "${MAIN}${NAME}${WHITE} (version ${VERSION})${RESET}"
    #         return
    #         # exit 0
    #         ;;
    #         # *) ;;
    #     esac
    #     }

#?######################## program debugging / logging / trace functions

    # exit_usage() {
    #     # Print script usage and exit
    #     # TODO replace with die()
    #     # Parameters:
    #     #   "$1" - specific message (e.g. 'file not found')
    #     #   "$2" - optional usage text
    #     die "$@"
    #     }

    # show_exports() {
    #     for var in $(export -p); do
    #         if declare -p "$var"; then
    #             true
    #             # if the var exists, get the name of it ...
    #         fi
    #     done
    #     }
    # get_function_list() {
    #     grep "$1" '() {' | sed 's/\(\.*\)*() {/\1/' | sed 's/function //' | sed 's/^[# ]*//' | sed 's/cat//' | cut -d ' ' -f1
    #     }

    # l() {
    #     # added 'list' default parameter instead of 'help'
    #     eval "launchctl ${*:-list}"
    #     }

#?######################## program control
    # null_it () { eval "$@" 2>/dev/null; }
        # To suppress the error message any output to standard error
        #   is sent to /dev/null using 2>/dev/null.

    # or_it () { eval "$@" || exit 0; }
        # If a command fails an OR operation can be used to provide a fallback
        #   (e.g. cat file.txt || exit 0. In this case an exit code of 0 is
        #   returned even if tHERE is an error.

    # die_now() { exit "$1"; }
#?######################## error reporting
    # errcho(){ >&2 echo "$@"; }
        # REF: https://stackoverflow.com/questions/2990414/echo-that-outputs-to-stderr

#?######################## error handling
    # _set_traps() {
    #     cur_opts="$-"
    #     debug_opts="axET"
    #     set "-${cur_opts}${debug_opts}"
    #     }

    # _trap_error() {
    #     me "ERR: $ERR"
    #     set "-${cur_opts}"
    #     # return 0
    #     }
    # _trap_debug() {
    #     # return 0
    #     ce "Script source:$MAIN $SCRIPT_SOURCE$RESET_FG $* \n"
    #     attn "echo VARIABLE ($VARIABLE) is being used HERE."
    #     }
    # _trap_exit() {
    #     # https://stackoverflow.com/a/50270940/9878098
    #     exitcode=$?
    #     printf 'error executing script...\n' 1>&2
    #     printf 'exit code returned: %s\n' "$exitcode"
    #     printf 'the command executing at the time of the error was: %s\n' "$BASH_COMMAND"
    #     printf 'command present on line: %d' "${BASH_LINENO[0]}"
    #     # Some more clean up code can be added HERE before exiting
    #     set "-${cur_opts}"
    #     exec 4>&- 5>&- 6>&-
    #     if [[ "$LOG" == '1' ]]; then
    #         LOG='0'
    #         exec 1>&4 2>&5
    #         exec 4>&- 5>&-
    #         attn "logging off ..."
    #     fi

    #     exit $exitcode
    #     }
#?######################## SCRIPT TESTS


#! ######################## entry point
