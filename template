#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

from pathlib import Path
from subprocess import check_output
from sys import argv, stderr, stdout

DEFAULT_TEMPLATE_PATH=Path().home() / 'Documents/coding/template'

class BasicColors:
    SUPPORTS_COLOR: bool = stderr.isatty() and hasattr(stderr, "isatty")

    MAIN: str = "\x1B[38;5;229m" * SUPPORTS_COLOR
    WARN: str = "\x1B[38;5;203m" * SUPPORTS_COLOR
    BLUE: str = "\x1B[38;5;38m" * SUPPORTS_COLOR
    GO: str = "\x1B[38;5;28m" * SUPPORTS_COLOR
    CHERRY: str = "\x1B[38;5;124m" * SUPPORTS_COLOR
    CANARY: str = "\x1B[38;5;226m" * SUPPORTS_COLOR
    ATTN: str = "\x1B[38;5;178m" * SUPPORTS_COLOR
    RAIN: str = "\x1B[38;5;93m" * SUPPORTS_COLOR
    WHITE: str = "\x1B[37m" * SUPPORTS_COLOR
    RESET: str = "\x1B[0m" * SUPPORTS_COLOR

c = BasicColors()

class Error(Exception):
    """ Base class for other exceptions. Use the BasicColors class to color
        the message text WARN red, (ansi \\x1B[38;5;203m ) by default. """
    def __init__(self, message=''):
        self.message = message or self.__doc__
        super().__init__(self.message)

    def __str__(self):
        return f'{c.WARN}{self.message}{c.RESET}'

class TemplateDirectoryError(Error):
    'An error with the python repo template directory occurred.'
    pass

class TestTemplate:
    def test_SUPPORTS_COLOR(self):
        pass
    def testBasicColors(self):
        for color in BasicColors:
            if color == SUPPORTS_COLOR:
                continue
            # TODO - test each color with and without 'SUPPORTS_COLOR'
            pass
    def test_Error(self):
        pass
    def test_TemplateDirectoryError(self):
        raise TemplateDirectoryError
        raise TemplateDirectoryError(f'The template directory could not be located:\n  <y>{SOURCE_PATH.as_posix()}')

        pass

def main(args=argv[1:]):
    SOURCE_PATH = Path(DEFAULT_TEMPLATE_PATH).resolve()
    raise TemplateDirectoryError
    raise TemplateDirectoryError(f'The template directory could not be located:\n  <y>{SOURCE_PATH.as_posix()}')


    if not args:
        print()
    else:
        SOURCE_PATH = Path(DEFAULT_TEMPLATE_PATH).resolve()
        if not SOURCE_PATH.is_dir():
            raise TemplateError(f'The template directory could not be located:\n  <y>{SOURCE_PATH.as_posix()}')

        PWD = Path().cwd()
        for filename in args:
            name = Path(filename).resolve().name
            source = sourcepath / name
            dest = Path().cwd() / name
            Path(filename)






        with open("sp.log", mode="at",) as f:
            f.write(argv[1:])
            f.write("=" * 79)
            try:
                f.write(check_output(argv[1:]).decode())
            except Exception as e:
                try:
                    f.write(e)
                except:
                    print(e)
            finally:
                f.write("-" * 79)

if __name__ == '__main__':
    main()
